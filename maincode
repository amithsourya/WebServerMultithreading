import java.io.* ;
import java.net.* ;
import java.util.* ;
public class WebServer {
	public static void main(String argv[]) throws Exception
    {
		int port = 2929;
		ServerSocket serverSocket = new ServerSocket(port);
		while (true)
		{
			Socket socket = serverSocket.accept();
			HttpRequest request = new HttpRequest(socket);
			Thread thread = new Thread(request);
			thread.start();
		}
    }
}
final class HttpRequest implements Runnable
{
	final static String CRLF = "\r\n";
    Socket socket;
    public HttpRequest(Socket socket) throws Exception 
    {
    	this.socket = socket;
    }
    public void run()
    {
    	try
    	{
            processRequest();
    	}
    	catch(Exception e)
    	{
            System.out.println(e);
    	}
    }
    private void processRequest() throws Exception
    {
		DataOutputStream os = new DataOutputStream(this.socket.getOutputStream());
		String statusLine, contentTypeLine, entityBody;
		statusLine = "HTTP/1.1";
		contentTypeLine = "Content-type: text/html" + CRLF;
		entityBody = "<HTML>" + 
			"<HEAD><TITLE>Java Project</TITLE></HEAD>" +
			"<BODY>My Java project is a Web Server which can handle multiple requests simultaneously using multithreading. Project developed by Amith Sourya Sadineni</BODY></HTML>";
		os.writeBytes(statusLine);
		// Send the content type line.
		os.writeBytes(contentTypeLine);
		// Send a blank line to indicate the end of the header lines.
		os.writeBytes(CRLF);
		
		os.writeBytes(entityBody);
		os.close();
		socket.close();
		//closing the socket
		//as the server socket is not closed if we want run this program again we can use another port number or kill the listening port manually using cmd
		//to kill port manually
		//netstat -o -n -a | findstr 0.0:<port>
		//output will be
		//TCP 0.0.0.0:3000 0.0.0.0:0 LISTENING <listening port>
		//now to kill listening port
		//taskkill /F /PID <listening port>
		//then you can use same port again
    }
}
